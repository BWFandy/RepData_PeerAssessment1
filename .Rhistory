install.packages("acs")
install.packages("assertthat")
install.packages("BH")
install.packages("car")
install.packages("caret")
install.packages("curl")
install.packages("DBI")
install.packages("devtools")
install.packages("dplyr")
install.packages("stringi")
install.packages("installr")
fy_flags <- read.csv("fy_flags.csv", header=TRUE)
setwd("~/R")
fy_flags <- read.csv("fy_flags.csv", header=TRUE)
head(fy_flags)
# Use rle() function to calculate consecutive "runs" of '1's
consec <- apply(fy_flags, 1, function(x) {
r <- rle(x)
max(r$lengths[r$values==1])
})
# The above code inserts '-Inf' for all rows without any '1' to calculate - see about changing that to NA.
# optional visual check:
head(consec)
# Add calculated Consecutive Years Giving to original fy_flags dataframe
consec_combined <- data.frame(fy_flags=fy_flags, Consecutive=unlist(consec))
# optional visual check:
head(consec_combined)
# Save final dataframe as csv:
write.csv(file="Consecutive.csv", x=consec_combined)
###
help(manova)
library(installr)
library(installr)
updateR()
2 + 3
5 * 10
7 + 3 * 2 -2
5 > 2
5 = 4
5 ==4
5 == 4
w = 5
rm(w)
log(100)
vec <- c(1, 2, 3, 4, 5)
vec2 <- 1:5
vec.tor <- 6:10
lm <- 1:5
vec
str(vec)
min(vec)
max(vec)
range(vec)
var(vec)
vec
class(vec)
d <- 1L
class(d)
e <- 1
class(e)
a <- c("a", "b", "c")
class(a)
new <- c("a", "b", 3)
class(new)
str(new)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
attributes(m)
dim(m)
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
a <- array(1:8, dim=c(2,2,2))
a
attributes(a)
x <- factor(c("yes", "no", "yes"), levels = c("yes", "no"))
x
?apply
args(read.csv)
a <- c(1:5, NA)
a
is.na(a)
0/0
is.nan(a)
?NaN
vec
vec[3]
vec[6]
a
good <- complete.cases(a)
good
a[good]
a[complete.cases(a)]
new.vec <- a[complete.cases(a)]
new.vec
a[complete.cases(a)]
a[!complete.cases(a)]
m[1,2]
m[,2]
m
x <- 8
if(x > 5) {}
x <- 8
if(x > 5) {
y <- 100
}
y
x <- 4
if(x > 5) {
y <- 100
}
y
x <- 8
x <- 8
if(x > 5) {
y <- 100
} else {
y <- 0
}
y
x <- 8
if(x > 5) {
y <- 100
} else if (x == 8) {
y <- 0
}
y
rm(y)
rm(x)
x <- 8
if(x > 5) {
y <- 100
} else if (x == 8) {
y <- 0
}
y
rm(x)
x <- 1:10
x <- 1:10
for(i in x) {
print(i)
}
rm(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
?apply
m
args(apply)
apply(m, 1, sum)  # applies the 'sum' function over all the ROWS of object 'm'
apply(m, 2, sum)  # applies the 'sum' function over all the COLUMNS of object 'm'
t <- list(a = 1:4, b = rnorm(1), c = rnorm(20,1), d = rnorm(100,5))
t
?rnorm
lapply(t, mean)
sapply(t, mean)
add2 <- function(x,y) {
x + y
}
add2(3, 5)
add2(3)
above10 <- function(x) {
use <- x > 10
x[use]
}
x <- 1:20
x
above10(1:20)
above10(vec)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 13)
?strptime
install.packages("knitr")
library(knitr)
opts_chunk$set(echo=TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
setwd("~/CourseraDataScienceSpecialty/4_Reproducible Research/repdata_data_activity")
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character",
"integer"))
str(data)
summary(data)
data$date <- ymd(data$date)
str(data)
head(data)
steps <- data %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarise(steps = sum(steps))
steps
ggplot(steps, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
meanSteps <- mean(steps$steps, na.rm = TRUE)
meanSteps
medianSteps <- median(steps$steps, na.rm = TRUE)
medianSteps
interval <- data %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarise(steps = mean(steps))
ggplot(interval, aes(x=interval, y=steps)) +
geom_line(color = "blue")
interval[which.max(interval$steps),]
sum(is.na(data$steps))
dataImputed <- data
nas <- is.na(dataImputed$steps)
avg_interval <- tapply(dataImputed$steps, dataImputed$interval, mean, na.rm=TRUE, simplify=TRUE)
dataImputed$steps[nas] <- avg_interval[as.character(dataImputed$interval[nas])]
sum(is.na(dataImputed$steps))
steps_full <- dataImputed %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps))
steps_full
ggplot(steps_full, aes(x = steps)) +
geom_histogram(fill = "red", binwidth = 1000) +
labs(title = "Total Number of Steps per day, including imputed missing values", x = "Steps per day", y = "Frequency")
meanSteps_all <- mean(steps_full$steps, na.rm = TRUE)
meanSteps_all
medianSteps_all <- median(steps_full$steps, na.rm = TRUE)
medianSteps_all
dataImputed <- mutate(dataImputed, weektype = ifelse(weekdays(dataImputed$date) == "Saturday" | weekdays(dataImputed$date) == "Sunday", "weekend", "weekday"))
dataImputed$weektype <- as.factor(dataImputed$weektype)
head(dataImputed)
summary(dataImputed$weektype)
interval_full <- dataImputed %>%
group_by(interval, weektype) %>%
summarise(steps = mean(steps))
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
s
install.packages("rmarkdown")
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
s
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
s
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character",
"integer"))
str(data)
summary(data)
